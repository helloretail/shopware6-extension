<?php declare(strict_types=1);

namespace Helret\HelloRetail\DataResolver;

use Helret\HelloRetail\Service\HelloRetailPageService;
use Helret\HelloRetail\Service\HelloRetailRecommendationService;
use Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotEntity;
use Shopware\Core\Content\Cms\DataResolver\CriteriaCollection;
use Shopware\Core\Content\Cms\DataResolver\Element\ElementDataCollection;
use Shopware\Core\Content\Cms\DataResolver\ResolverContext\ResolverContext;
use Shopware\Core\Content\Cms\SalesChannel\Struct\ProductListingStruct;
use Shopware\Core\Content\Product\Cms\ProductListingCmsElementResolver;
use Shopware\Core\Content\Product\SalesChannel\Listing\AbstractProductListingRoute;
use Shopware\Core\Framework\DataAbstractionLayer\Search\Criteria;
use Shopware\Core\System\SalesChannel\SalesChannelContext;
use Shopware\Core\System\SystemConfig\SystemConfigService;
use Symfony\Component\HttpFoundation\Request;

class ProductListingCmsElementResolverDecorator extends ProductListingCmsElementResolver {

    public function __construct(
        private readonly AbstractProductListingRoute $listingRoute,
        private readonly HelloRetailPageService $pageService
    ) {
        parent::__construct($this->listingRoute);
    }
    public function collect(CmsSlotEntity $slot, ResolverContext $resolverContext): ?CriteriaCollection
    {
        return parent::collect($slot, $resolverContext); // TODO: Change the autogenerated stub
    }

    public function enrich(CmsSlotEntity $slot, ResolverContext $resolverContext, ElementDataCollection $result): void
    {
//        parent::enrich($slot, $resolverContext, $result);
//        return;
        $config = $slot->getFieldConfig();
        $entity = null;

        if (method_exists($resolverContext, 'getEntity')) {
            $entity = $resolverContext->getEntity();
        }

        $key = $config->get('helloRetailKey');
        if ($key === null) {
            parent::enrich($slot, $resolverContext, $result);
        }

        $productIds = $this->pageService->getPage(
            $key->getValue(),
            $entity,
            $resolverContext->getSalesChannelContext()
        );

        if (!$productIds) {
            parent::enrich($slot, $resolverContext, $result);
        }
        $navigationId = $this->getNavigationId($resolverContext->getRequest(), $resolverContext->getSalesChannelContext());


        //TODO PORT OVER FROM PARENT
        //$this->restrictSortings($request, $slot);

    }

    private function getNavigationId(Request $request, SalesChannelContext $salesChannelContext): string
    {
        if ($navigationId = $request->get('navigationId')) {
            return $navigationId;
        }

        $params = $request->attributes->get('_route_params');

        if ($params && isset($params['navigationId'])) {
            return $params['navigationId'];
        }

        return $salesChannelContext->getSalesChannel()->getNavigationCategoryId();
    }
}