<?php declare(strict_types=1);

namespace Helret\HelloRetail\DataResolver;

use Helret\HelloRetail\Service\HelloRetailPageService;
use Helret\HelloRetail\Service\HelloRetailRecommendationService;
use Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotEntity;
use Shopware\Core\Content\Cms\DataResolver\CriteriaCollection;
use Shopware\Core\Content\Cms\DataResolver\Element\ElementDataCollection;
use Shopware\Core\Content\Cms\DataResolver\ResolverContext\ResolverContext;
use Shopware\Core\Content\Cms\SalesChannel\Struct\ProductListingStruct;
use Shopware\Core\Content\Product\Cms\ProductListingCmsElementResolver;
use Shopware\Core\Content\Product\SalesChannel\Listing\AbstractProductListingRoute;
use Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingFeaturesSubscriber;
use Shopware\Core\Framework\DataAbstractionLayer\Search\Criteria;
use Shopware\Core\System\SalesChannel\SalesChannelContext;
use Shopware\Core\System\SystemConfig\SystemConfigService;
use Symfony\Component\HttpFoundation\Request;

class ProductListingCmsElementResolverDecorator extends ProductListingCmsElementResolver {

    public function __construct(
        private readonly AbstractProductListingRoute $listingRoute,
        private readonly HelloRetailPageService $pageService
    ) {
        parent::__construct($this->listingRoute);
    }
    public function collect(CmsSlotEntity $slot, ResolverContext $resolverContext): ?CriteriaCollection
    {
        return parent::collect($slot, $resolverContext); // TODO: Change the autogenerated stub
    }

    public function enrich(CmsSlotEntity $slot, ResolverContext $resolverContext, ElementDataCollection $result): void
    {
        $config = $slot->getFieldConfig();
        $hierarchies = [];

        $key = $config->get('helloRetailKey')->getValue();
        if ($key) {
            if (method_exists($resolverContext, 'getEntity')) {
                $entity = $resolverContext->getEntity();
                $hierarchies = $this->pageService->renderHierarchies($entity);
            }

            $resolverContext->getRequest()->request->set('helloRetailPageKey', $key);
            $resolverContext->getRequest()->request->set('helloRetailHierarchies', $hierarchies);

//            $pageResult = $this->pageService->getPage(
//                $key,
//                $hierarchies,
//                $resolverContext->getSalesChannelContext()
//            );
//            $productIds = $pageResult->getProductIds();
//
//            if ($productIds) {
//                $resolverContext->getRequest()->request->set('helloRetailProductIds', $productIds);
//            }
        }



        parent::enrich($slot, $resolverContext, $result); // TODO: Change the autogenerated stub
    }
/*

    public function __enrich(CmsSlotEntity $slot, ResolverContext $resolverContext, ElementDataCollection $result): void
    {
        //parent::enrich($slot, $resolverContext, $result);
        //return;
        $config = $slot->getFieldConfig();
        $entity = null;

        if (method_exists($resolverContext, 'getEntity')) {
            $entity = $resolverContext->getEntity();
        }

        $key = $config->get('helloRetailKey');
        if ($key === null) {
            parent::enrich($slot, $resolverContext, $result);
        }

        $pageResult = $this->pageService->getPage(
            $key->getValue(),
            $entity,
            $resolverContext->getSalesChannelContext()
        );
        $productIds = $pageResult->getProductIds();

        if (!$productIds) {
            parent::enrich($slot, $resolverContext, $result);
        }

        $data = new ProductListingStruct();
        $slot->setData($data);

        $request = $resolverContext->getRequest();
        $context = $resolverContext->getSalesChannelContext();

        $this->restrictFilters($slot, $request);

        if ($this->isCustomSorting($slot)) {
            $this->restrictSortings($request, $slot);
            $this->addDefaultSorting($request, $slot);
        }

        $navigationId = $this->getNavigationId($request, $context);

        $criteria = new Criteria($productIds);
        $criteria->setTitle('cms::product-listing');

        $listing = $this->listingRoute
            ->load($navigationId, $request, $context, $criteria)
            ->getResult();

        $data->setListing($listing);
    }

    private function getNavigationId(Request $request, SalesChannelContext $salesChannelContext): string
    {
        if ($navigationId = $request->get('navigationId')) {
            return $navigationId;
        }

        $params = $request->attributes->get('_route_params');

        if ($params && isset($params['navigationId'])) {
            return $params['navigationId'];
        }

        return $salesChannelContext->getSalesChannel()->getNavigationCategoryId();
    }

    private function restrictFilters(CmsSlotEntity $slot, Request $request): void
    {
        // setup the default behavior
        $defaults = ['manufacturer-filter', 'rating-filter', 'shipping-free-filter', 'price-filter', 'property-filter'];

        $request->request->set(ProductListingFeaturesSubscriber::PROPERTY_GROUP_IDS_REQUEST_PARAM, null);

        $config = $slot->get('config');

        if (isset($config['propertyWhitelist']['value']) && (is_countable($config['propertyWhitelist']['value']) ? \count($config['propertyWhitelist']['value']) : 0) > 0) {
            $request->request->set(ProductListingFeaturesSubscriber::PROPERTY_GROUP_IDS_REQUEST_PARAM, $config['propertyWhitelist']['value']);
        }

        if (!isset($config['filters']['value'])) {
            return;
        }

        // apply config settings
        $config = explode(',', (string) $config['filters']['value']);

        foreach ($defaults as $filter) {
            if (\in_array($filter, $config, true)) {
                continue;
            }

            $request->request->set($filter, false);
        }
    }


    //sortings
    private function isCustomSorting(CmsSlotEntity $slot): bool
    {
        $config = $slot->getTranslation('config');

        if ($config && isset($config['useCustomSorting']) && isset($config['useCustomSorting']['value'])) {
            return $config['useCustomSorting']['value'];
        }

        return false;
    }

    private function addDefaultSorting(Request $request, CmsSlotEntity $slot): void
    {
        if ($request->get('order')) {
            return;
        }

        $config = $slot->getTranslation('config');

        if ($config && isset($config['defaultSorting']) && isset($config['defaultSorting']['value']) && $config['defaultSorting']['value']) {
            $request->request->set('order', $config['defaultSorting']['value']);

            return;
        }

        // if we have no specific order given at this point, set the order to be the highest's priority available sorting
        if ($request->get('availableSortings')) {
            $availableSortings = $request->get('availableSortings');
            arsort($availableSortings, \SORT_DESC | \SORT_NUMERIC);

            $request->request->set('order', array_key_first($availableSortings));
        }
    }

    private function restrictSortings(Request $request, CmsSlotEntity $slot): void
    {
        $config = $slot->getTranslation('config');

        if (!$config || !isset($config['availableSortings']) || !isset($config['availableSortings']['value'])) {
            return;
        }

        $request->request->set('availableSortings', $config['availableSortings']['value']);
    }
*/

}